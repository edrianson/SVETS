/*
Deployment script for SVETSDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar LoadTestData "true"
:setvar DatabaseName "SVETSDB"
:setvar DefaultFilePrefix "SVETSDB"
:setvar DefaultDataPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Treatment].[OwnerId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Treatment])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dbo].[Treatment]...';


GO
ALTER TABLE [dbo].[Treatment] DROP CONSTRAINT [FK__Treatment__PetNa__2A4B4B5E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Treatment]...';


GO
ALTER TABLE [dbo].[Treatment] DROP CONSTRAINT [FK__Treatment__Owner__2B3F6F97];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Treatment]...';


GO
ALTER TABLE [dbo].[Treatment] DROP CONSTRAINT [FK__Treatment__Proce__2C3393D0];


GO
PRINT N'Starting rebuilding table [dbo].[Treatment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Treatment] (
    [PetName]     NCHAR (6) NOT NULL,
    [ProcedureId] INT       NOT NULL,
    [Date]        DATETIME  NOT NULL,
    [Notes]       TEXT      NOT NULL,
    PRIMARY KEY CLUSTERED ([PetName] ASC, [Date] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Treatment])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Treatment] ([PetName], [Date], [ProcedureId], [Notes])
        SELECT   [PetName],
                 [Date],
                 [ProcedureId],
                 [Notes]
        FROM     [dbo].[Treatment]
        ORDER BY [PetName] ASC, [Date] ASC;
    END

DROP TABLE [dbo].[Treatment];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Treatment]', N'Treatment';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating unnamed constraint on [dbo].[Treatment]...';


GO
ALTER TABLE [dbo].[Treatment] WITH NOCHECK
    ADD FOREIGN KEY ([PetName]) REFERENCES [dbo].[Pet] ([Name]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Treatment]...';


GO
ALTER TABLE [dbo].[Treatment] WITH NOCHECK
    ADD FOREIGN KEY ([ProcedureId]) REFERENCES [dbo].[Procedure] ([ProcedureId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF '$(LoadTestData)' = 'true' BEGIN
	INSERT INTO [Owner]([OwnerId], [SurName], [GivenName], [Phone]) VALUES
		(1, 'Sinatra', 'Frank', '400111222'),
		(2, 'Ellington', 'Duke', '400222333'),
		(3, 'Fitzgerald', 'Ella', '400333444');

	INSERT INTO [Pet]([Name], [Type], [OwnerId]) VALUES
		('Buster', 'Dog', 1),
		('Fluffy', 'Cat', 1),
		('Stew', 'Rabbit', 2),
		('Buster', 'Dog', 3),
		('Pooper', 'Dog', 3);

	INSERT INTO [Procedure]([ProcedureId], [Description], [Price]) VALUES
		(1, 'Rabies Vaccination', 24),
		(10, 'Examine and Treat Wound', 30),
		(5, 'Heart Worm Test', 25),
		(8, 'Tetnus Vaccination', 17);

	INSERT INTO [Treatment]([PetName], [ProcedureId], [Date], [Notes]) VALUES
		('Buster', 1, 20-6-17, 'Routine Vaccination'),
		('Buster', 1, 15-5-18, 'Booster Shot'),
		('Fluffy', 10, 10-5-18, 'Wounds sustained in apparent cat fight.'),
		('Stew', 10, 10-5-18, 'Wounds sustained during attemot to cook the stew.'),
		('Pooper', 5, 18-5-18, 'Routine Test');
END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Treatment'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
